# Generated by Django 2.1.3 on 2018-12-22 01:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0005_auto_20180821_1820'),
        ('investigations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter', models.PositiveIntegerField(help_text='Chapter number. Equal to or Greater than 1.', validators=[django.core.validators.MinValueValidator(1)])),
                ('name', models.CharField(help_text='It is good to give it a cool name!', max_length=200)),
                ('emoji', models.CharField(blank=True, help_text='The emoji to display on Discord. Must looks like <strong>:this:</strong>', max_length=100, validators=[django.core.validators.RegexValidator(message='Please enter an emoji like :this:', regex='^:\\w{2,}:$')])),
                ('is_active', models.BooleanField(default=True, help_text='Check this to make the chapter available for users to discover trophies in it!')),
            ],
        ),
        migrations.CreateModel(
            name='Trophy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Yes, I need a name for management purposes.', max_length=200)),
                ('position', models.PositiveIntegerField(help_text='The position of this trophy to be displayed on Discord.', validators=[django.core.validators.MinValueValidator(1)])),
                ('emoji', models.CharField(blank=True, help_text='The emoji to display on Discord. Must looks like <strong>:this:</strong>.', max_length=100, validators=[django.core.validators.RegexValidator(message='Please enter an emoji like :this:', regex='^:\\w{2,}:$')])),
                ('discovered_at', models.DateTimeField(blank=True, help_text='The time when this trophy is discovered.', null=True)),
                ('chapter', models.ForeignKey(help_text='The chapter this trophy belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='trophies', to='chapters.Chapter')),
                ('discovered_by', models.ForeignKey(blank=True, help_text='The user who discovered this trophy.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trophies', to='users.DiscordUser')),
                ('hint', models.OneToOneField(help_text='The hint this trophy is hiding.', on_delete=django.db.models.deletion.CASCADE, related_name='trophy', to='investigations.Hint')),
            ],
            options={
                'verbose_name': 'Trophy',
                'verbose_name_plural': 'Trophies',
            },
        ),
    ]
